{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { AccordionPanelContext } from './AccordionPanelContext';\nexport const AccordionPanel = _ref => {\n  let {\n    children,\n    ...props\n  } = _ref;\n  const {\n    alwaysOpen\n  } = props;\n  const [isOpen, setOpen] = useState(props.isOpen);\n  const provider = alwaysOpen ? {\n    ...props,\n    isOpen,\n    setOpen: () => setOpen(!isOpen)\n  } : props;\n  return _jsx(AccordionPanelContext.Provider, {\n    value: provider,\n    children: children\n  });\n};","map":{"version":3,"names":["jsx","_jsx","useState","AccordionPanelContext","AccordionPanel","_ref","children","props","alwaysOpen","isOpen","setOpen","provider","Provider","value"],"sources":["/Users/francisco/Documents/Curso desarrollo web/Proyectos/Proyectos/Portafolio/Proyecto React/pokedex/node_modules/flowbite-react/lib/esm/components/Accordion/AccordionPanel.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useState } from 'react';\nimport { AccordionPanelContext } from './AccordionPanelContext';\nexport const AccordionPanel = ({ children, ...props }) => {\n    const { alwaysOpen } = props;\n    const [isOpen, setOpen] = useState(props.isOpen);\n    const provider = alwaysOpen\n        ? {\n            ...props,\n            isOpen,\n            setOpen: () => setOpen(!isOpen),\n        }\n        : props;\n    return _jsx(AccordionPanelContext.Provider, { value: provider, children: children });\n};\n"],"mappings":"AAAA,SAASA,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,qBAAqB,QAAQ,yBAAyB;AAC/D,OAAO,MAAMC,cAAc,GAAGC,IAAA,IAA4B;EAAA,IAA3B;IAAEC,QAAQ;IAAE,GAAGC;EAAM,CAAC,GAAAF,IAAA;EACjD,MAAM;IAAEG;EAAW,CAAC,GAAGD,KAAK;EAC5B,MAAM,CAACE,MAAM,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAACK,KAAK,CAACE,MAAM,CAAC;EAChD,MAAME,QAAQ,GAAGH,UAAU,GACrB;IACE,GAAGD,KAAK;IACRE,MAAM;IACNC,OAAO,EAAEA,CAAA,KAAMA,OAAO,CAAC,CAACD,MAAM;EAClC,CAAC,GACCF,KAAK;EACX,OAAON,IAAI,CAACE,qBAAqB,CAACS,QAAQ,EAAE;IAAEC,KAAK,EAAEF,QAAQ;IAAEL,QAAQ,EAAEA;EAAS,CAAC,CAAC;AACxF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}