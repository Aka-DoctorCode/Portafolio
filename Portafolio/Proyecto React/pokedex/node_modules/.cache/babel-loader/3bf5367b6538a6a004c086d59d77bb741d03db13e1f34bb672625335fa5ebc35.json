{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport windowExists from '../../helpers/window-exists';\nimport defaultTheme from '../../theme/default';\nexport const ThemeContext = createContext({\n  theme: defaultTheme\n});\nexport const ThemeProvider = _ref => {\n  let {\n    children,\n    value\n  } = _ref;\n  return _jsx(ThemeContext.Provider, {\n    value: value,\n    children: children\n  });\n};\nexport function useTheme() {\n  return useContext(ThemeContext);\n}\nexport const useThemeMode = () => {\n  const userPreferenceIsDark = () => windowExists() && window.matchMedia?.('(prefers-color-scheme: dark)').matches;\n  const getPrefersColorScheme = () => userPreferenceIsDark() ? 'dark' : 'light';\n  const onToggleMode = () => {\n    const newMode = mode === 'dark' ? 'light' : 'dark';\n    setMode(newMode);\n    setModeState(newMode);\n  };\n  const {\n    mode: contextMode,\n    toggleMode = onToggleMode\n  } = useContext(ThemeContext);\n  const [mode, setModeState] = useState(contextMode ? contextMode : getPrefersColorScheme());\n  const setMode = useCallback(mode => {\n    if (!windowExists()) {\n      return;\n    }\n    if (mode === 'dark') {\n      document.documentElement.classList.add('dark');\n      return;\n    }\n    document.documentElement.classList.remove('dark');\n  }, []);\n  useEffect(() => {\n    if (contextMode) {\n      setMode(contextMode);\n      setModeState(contextMode);\n    }\n  }, [contextMode, setMode, setModeState]);\n  return [mode, setModeState, toggleMode];\n};","map":{"version":3,"names":["jsx","_jsx","createContext","useCallback","useContext","useEffect","useState","windowExists","defaultTheme","ThemeContext","theme","ThemeProvider","_ref","children","value","Provider","useTheme","useThemeMode","userPreferenceIsDark","window","matchMedia","matches","getPrefersColorScheme","onToggleMode","newMode","mode","setMode","setModeState","contextMode","toggleMode","document","documentElement","classList","add","remove"],"sources":["/Users/francisco/Documents/Curso desarrollo web/Proyectos/Proyectos/Portafolio/Proyecto React/pokedex/node_modules/flowbite-react/lib/esm/components/Flowbite/ThemeContext.js"],"sourcesContent":["import { jsx as _jsx } from \"react/jsx-runtime\";\nimport { createContext, useCallback, useContext, useEffect, useState } from 'react';\nimport windowExists from '../../helpers/window-exists';\nimport defaultTheme from '../../theme/default';\nexport const ThemeContext = createContext({\n    theme: defaultTheme,\n});\nexport const ThemeProvider = ({ children, value }) => {\n    return _jsx(ThemeContext.Provider, { value: value, children: children });\n};\nexport function useTheme() {\n    return useContext(ThemeContext);\n}\nexport const useThemeMode = () => {\n    const userPreferenceIsDark = () => windowExists() && window.matchMedia?.('(prefers-color-scheme: dark)').matches;\n    const getPrefersColorScheme = () => (userPreferenceIsDark() ? 'dark' : 'light');\n    const onToggleMode = () => {\n        const newMode = mode === 'dark' ? 'light' : 'dark';\n        setMode(newMode);\n        setModeState(newMode);\n    };\n    const { mode: contextMode, toggleMode = onToggleMode } = useContext(ThemeContext);\n    const [mode, setModeState] = useState(contextMode ? contextMode : getPrefersColorScheme());\n    const setMode = useCallback((mode) => {\n        if (!windowExists()) {\n            return;\n        }\n        if (mode === 'dark') {\n            document.documentElement.classList.add('dark');\n            return;\n        }\n        document.documentElement.classList.remove('dark');\n    }, []);\n    useEffect(() => {\n        if (contextMode) {\n            setMode(contextMode);\n            setModeState(contextMode);\n        }\n    }, [contextMode, setMode, setModeState]);\n    return [mode, setModeState, toggleMode];\n};\n"],"mappings":"AAAA,SAASA,GAAG,IAAIC,IAAI,QAAQ,mBAAmB;AAC/C,SAASC,aAAa,EAAEC,WAAW,EAAEC,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACnF,OAAOC,YAAY,MAAM,6BAA6B;AACtD,OAAOC,YAAY,MAAM,qBAAqB;AAC9C,OAAO,MAAMC,YAAY,GAAGP,aAAa,CAAC;EACtCQ,KAAK,EAAEF;AACX,CAAC,CAAC;AACF,OAAO,MAAMG,aAAa,GAAGC,IAAA,IAAyB;EAAA,IAAxB;IAAEC,QAAQ;IAAEC;EAAM,CAAC,GAAAF,IAAA;EAC7C,OAAOX,IAAI,CAACQ,YAAY,CAACM,QAAQ,EAAE;IAAED,KAAK,EAAEA,KAAK;IAAED,QAAQ,EAAEA;EAAS,CAAC,CAAC;AAC5E,CAAC;AACD,OAAO,SAASG,QAAQA,CAAA,EAAG;EACvB,OAAOZ,UAAU,CAACK,YAAY,CAAC;AACnC;AACA,OAAO,MAAMQ,YAAY,GAAGA,CAAA,KAAM;EAC9B,MAAMC,oBAAoB,GAAGA,CAAA,KAAMX,YAAY,EAAE,IAAIY,MAAM,CAACC,UAAU,GAAG,8BAA8B,CAAC,CAACC,OAAO;EAChH,MAAMC,qBAAqB,GAAGA,CAAA,KAAOJ,oBAAoB,EAAE,GAAG,MAAM,GAAG,OAAQ;EAC/E,MAAMK,YAAY,GAAGA,CAAA,KAAM;IACvB,MAAMC,OAAO,GAAGC,IAAI,KAAK,MAAM,GAAG,OAAO,GAAG,MAAM;IAClDC,OAAO,CAACF,OAAO,CAAC;IAChBG,YAAY,CAACH,OAAO,CAAC;EACzB,CAAC;EACD,MAAM;IAAEC,IAAI,EAAEG,WAAW;IAAEC,UAAU,GAAGN;EAAa,CAAC,GAAGnB,UAAU,CAACK,YAAY,CAAC;EACjF,MAAM,CAACgB,IAAI,EAAEE,YAAY,CAAC,GAAGrB,QAAQ,CAACsB,WAAW,GAAGA,WAAW,GAAGN,qBAAqB,EAAE,CAAC;EAC1F,MAAMI,OAAO,GAAGvB,WAAW,CAAEsB,IAAI,IAAK;IAClC,IAAI,CAAClB,YAAY,EAAE,EAAE;MACjB;IACJ;IACA,IAAIkB,IAAI,KAAK,MAAM,EAAE;MACjBK,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACC,GAAG,CAAC,MAAM,CAAC;MAC9C;IACJ;IACAH,QAAQ,CAACC,eAAe,CAACC,SAAS,CAACE,MAAM,CAAC,MAAM,CAAC;EACrD,CAAC,EAAE,EAAE,CAAC;EACN7B,SAAS,CAAC,MAAM;IACZ,IAAIuB,WAAW,EAAE;MACbF,OAAO,CAACE,WAAW,CAAC;MACpBD,YAAY,CAACC,WAAW,CAAC;IAC7B;EACJ,CAAC,EAAE,CAACA,WAAW,EAAEF,OAAO,EAAEC,YAAY,CAAC,CAAC;EACxC,OAAO,CAACF,IAAI,EAAEE,YAAY,EAAEE,UAAU,CAAC;AAC3C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}